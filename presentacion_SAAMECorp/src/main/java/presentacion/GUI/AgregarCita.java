package presentacion.GUI;

import dto.CitaNuevaDTO;
import dto.PsicologoCitaDTO;
import excepciones.CoordinadorException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import presentacion.control.CoordinadorAplicacion;
import presentacion.control.CoordinadorNegocio;
import presentacion.sesion.GestorSesion;
import presentacion.sesion.TipoUsuario;

/**
 * Frame que representa la pantalla donde el usuario ingresa los datos
 * necesarios para agendar una cita en el sistema.
 *
 * @author Alici
 */
public class AgregarCita extends javax.swing.JFrame {

    private Calendar fechaCita;
    private final CoordinadorAplicacion flujoPantallas = CoordinadorAplicacion.getInstance();
    CoordinadorNegocio controlNegocio = CoordinadorNegocio.getInstance();
    private List<PsicologoCitaDTO> psicologos;

    /**
     * Constructor que recibe la fecha seleccionada para la cita, inicializa los
     * componentes del panel.
     *
     * @param fechaSeleccionada
     */
    public AgregarCita(Calendar fechaSeleccionada) {
        try {
            this.fechaCita = fechaSeleccionada;
            this.psicologos = controlNegocio.mostrarPsicologos(fechaSeleccionada);
            initComponents();
            btnConfirmar.setEnabled(false);
            SimpleDateFormat formato = new SimpleDateFormat("EEEE d 'de' MMMM 'de' yyyy", Locale.of("es", "ES"));
            lblFechaCita.setText(formato.format(fechaCita.getTime()));
            if (GestorSesion.getTipoUsuario() == TipoUsuario.ADMIN) {
                llenarComboPsicologos();
                agregarListeners();
            } else {
                agregarListeners();
                seleccionarPsicologoUsuario();
            }
            if (cmbPsicologos.getItemCount() == 0) {
                JOptionPane.showMessageDialog(null, "No hay psicologos disponibles en el momento", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (CoordinadorException ex) {
            Logger.getLogger(AgregarCita.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la cita", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblPsicologo = new javax.swing.JLabel();
        cmbPsicologos = new javax.swing.JComboBox<>();
        lblHorario = new javax.swing.JLabel();
        cmbHorarios = new javax.swing.JComboBox<>();
        cmbCubiculo = new javax.swing.JComboBox<>();
        lblCubiculo = new javax.swing.JLabel();
        lblNombrePaciente = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        lblTelefonoPaciente = new javax.swing.JLabel();
        txtTelefonoPaciente = new javax.swing.JTextField();
        lblTelefonoPaciente1 = new javax.swing.JLabel();
        txtCorreoPaciente = new javax.swing.JTextField();
        btnConfirmar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        lblFechaCita = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(221, 212, 240));
        setPreferredSize(new java.awt.Dimension(1101, 677));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(221, 212, 240));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(1101, 677));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(188, 163, 226));

        lblTitulo.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        lblTitulo.setText("Agendar Cita");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(959, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(850, 550));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPsicologo.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblPsicologo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPsicologo.setText("Psicologo");
        jPanel4.add(lblPsicologo, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 40, 104, -1));

        jPanel4.add(cmbPsicologos, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 65, 602, -1));

        lblHorario.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblHorario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHorario.setText("Horario");
        jPanel4.add(lblHorario, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 99, 104, -1));

        jPanel4.add(cmbHorarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 124, 602, -1));

        jPanel4.add(cmbCubiculo, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 183, 602, -1));

        lblCubiculo.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblCubiculo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCubiculo.setText("Cubiculo");
        jPanel4.add(lblCubiculo, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 158, 104, -1));

        lblNombrePaciente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblNombrePaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombrePaciente.setText("Nombre del Paciente");
        jPanel4.add(lblNombrePaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 223, 192, -1));
        jPanel4.add(txtNombrePaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 248, 602, -1));

        lblTelefonoPaciente.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblTelefonoPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTelefonoPaciente.setText("Telefono del Paciente");
        jPanel4.add(lblTelefonoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 288, 192, -1));
        jPanel4.add(txtTelefonoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 313, 602, -1));

        lblTelefonoPaciente1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblTelefonoPaciente1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTelefonoPaciente1.setText("Correo del Paciente");
        jPanel4.add(lblTelefonoPaciente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 347, 192, -1));
        jPanel4.add(txtCorreoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 372, 602, -1));

        btnConfirmar.setBackground(new java.awt.Color(86, 33, 89));
        btnConfirmar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.setBorder(null);
        btnConfirmar.setPreferredSize(new java.awt.Dimension(64, 19));
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });
        jPanel4.add(btnConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 412, 610, 30));

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8-back-30.png"))); // NOI18N
        btnRegresar.setBorderPainted(false);
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        jPanel4.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        lblFechaCita.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblFechaCita.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaCita.setText("FECHA");
        jPanel4.add(lblFechaCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 18, 602, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 770, 500));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        mostrarResumenCita();
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        flujoPantallas.pantallaCalendarioCitas(this);
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * M√©todo que obtiene los datos para registrar la cita y genera el DTO
     * necesario para mandar agendar la cita.
     *
     * @return CitaNuevaDTO con los datos ingresados por el usuario.
     */
    private CitaNuevaDTO obtenerDatosCita() {
        PsicologoCitaDTO psicologo = (PsicologoCitaDTO) cmbPsicologos.getSelectedItem();
        return new CitaNuevaDTO(
                obtenerFechaHoraCita(),
                cmbCubiculo.getSelectedItem().toString(),
                psicologo,
                txtNombrePaciente.getText(),
                txtTelefonoPaciente.getText(),
                txtCorreoPaciente.getText(),
                null
        );
    }

    /**
     * M√©todo que selecciona autom√°ticamente el nombre del psic√≥logo de la
     * sesi√≥n en el combo box cuando el usuario es de tipo psic√≥logo.
     */
    private void seleccionarPsicologoUsuario() {
        try {
            PsicologoCitaDTO psicologoUsuario = controlNegocio.mostrarPsicologo(GestorSesion.getIdentificadorUsuario(), fechaCita);
            cmbPsicologos.addItem(psicologoUsuario);
            cmbPsicologos.setEnabled(false);
        } catch (CoordinadorException ex) {
            Logger.getLogger(AgregarCita.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Usted no tiene disponibilidad de horarios para el d√≠a seleccionado", "No es posible agendar ninguna cita para el d√≠a seleccionado", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * M√©todo que muestra el resumen de la cita a agendar.
     */
    private void mostrarResumenCita() {
        try {
            CitaNuevaDTO cita = obtenerDatosCita(); // M√©todo que obtiene los datos de la UI
            String mensaje = controlNegocio.obtenerResumenCita(cita);

            if (!mensaje.startsWith("¬øDesea agendar la cita?")) {
                JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int opcion = JOptionPane.showOptionDialog(
                    this,
                    mensaje,
                    "Confirmaci√≥n",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    new Object[]{"Cancelar", "Aceptar"},
                    "Aceptar"
            );

            if (opcion == 1) {
                String resultado = controlNegocio.agendarCita(cita);
                JOptionPane.showMessageDialog(null, "¬°Cita agendada exitosamente!, " + resultado, "Cita agendada exitosamente", JOptionPane.INFORMATION_MESSAGE);
                flujoPantallas.pantallaCalendarioCitas(this);
            }
        } catch (CoordinadorException ex) {
            Logger.getLogger(AgregarCita.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al agendar cita", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * M√©todo que llena el combo box de los psic√≥logos registrados en el
     * sistema.
     */
    private void llenarComboPsicologos() {
        cmbPsicologos.removeAllItems();
        for (PsicologoCitaDTO psicologo : psicologos) {
            cmbPsicologos.addItem(psicologo);
        }
    }

    /**
     * M√©todo que llena el combo box con los horarios disponibles del psic√≥logo
     * seleccionado.
     *
     * @param psicologoSeleccionado Psic√≥logo que ha sido seleccionado
     */
    private void llenarComboHorariosPsicologo(PsicologoCitaDTO psicologoSeleccionado) {
        cmbHorarios.removeAllItems();
        cmbHorarios.setEnabled(true);
        for (LocalTime hora : psicologoSeleccionado.getHorarioDia()) {
            cmbHorarios.addItem(hora);
        }
    }

    /**
     * M√©todo que obtiene la fecha y hora de la cita a partir del d√≠a y el
     * horario seleccionados.
     *
     * @return Regresa un Calendar con la fecha y hora de la cita.
     */
    private Calendar obtenerFechaHoraCita() {
        LocalTime horaSeleccionada = (LocalTime) cmbHorarios.getSelectedItem();
        fechaCita.set(Calendar.HOUR_OF_DAY, horaSeleccionada.getHour());
        fechaCita.set(Calendar.MINUTE, horaSeleccionada.getMinute());
        return fechaCita;
    }

    /**
     * M√©todo que llena el combo box con los cub√≠culos que se encuentran
     * disponibles en el horario seleccionado.
     */
    private void llenarComboCubiculos() {
        try {
            cmbCubiculo.removeAllItems();
            cmbCubiculo.setEnabled(true);
            List<String> cubiculos = controlNegocio.mostrarCubiculos(obtenerFechaHoraCita());
            if (cubiculos.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No hay cubiculos disponibles para la fecha y hora seleccionadas", "Sin disponiblidad de cubiculos", JOptionPane.INFORMATION_MESSAGE);
            }
            for (String cubiculo : cubiculos) {
                cmbCubiculo.addItem(cubiculo);
            }
        } catch (CoordinadorException ex) {
            Logger.getLogger(AgregarCita.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al obtener los cubiculos disponibles", "Error al obtener cubiculos", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * M√©todo que habilita el bot√≥n para registrar la cita cuando todos los
     * campos han sido llenados.
     */
    private void actualizarEstadoBoton() {
        boolean camposLlenos = !txtNombrePaciente.getText().trim().isEmpty()
                && !txtCorreoPaciente.getText().trim().isEmpty()
                && !txtTelefonoPaciente.getText().trim().isEmpty()
                && cmbCubiculo.getSelectedIndex() != -1
                && cmbPsicologos.getSelectedIndex() != -1
                && cmbHorarios.getSelectedIndex() != -1;

        btnConfirmar.setEnabled(camposLlenos);

    }

    /**
     * M√©todo que agrega los listener a los componentes que solicitan
     * informaci√≥n al usuario.
     */
    private void agregarListeners() {
        DocumentListener listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarEstadoBoton();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarEstadoBoton();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarEstadoBoton();
            }
        };
        txtNombrePaciente.getDocument().addDocumentListener(listener);
        txtCorreoPaciente.getDocument().addDocumentListener(listener);
        txtTelefonoPaciente.getDocument().addDocumentListener(listener);

        // Listener para cBoxEspecialidad
        cmbPsicologos.addItemListener(e -> {
            if (cmbPsicologos.getSelectedIndex() != -1) {
                try {
                    PsicologoCitaDTO psicologoSeleccionado = (PsicologoCitaDTO) cmbPsicologos.getSelectedItem();
                    if (controlNegocio.validarAdeudoPsicologoSeleccionado(psicologoSeleccionado)) {
                        llenarComboHorariosPsicologo(psicologoSeleccionado);
                    } else {
                        if (GestorSesion.getTipoUsuario() == TipoUsuario.ADMIN) {
                            JOptionPane.showMessageDialog(null, "El psic√≥logo seleccionado presenta un adeudo de 500 o mayor, por lo que no es posible agendarle una cita", "No le es posible agendar cita a este psic√≥logo en este momento", JOptionPane.INFORMATION_MESSAGE);
                            cmbPsicologos.removeItem(psicologoSeleccionado);
                        } else {
                            JOptionPane.showMessageDialog(null, "Usted presenta un adeudo de 500 o mayor, por lo que no es posible agendar una cita", "No le es posible agendar cita en este momento", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (CoordinadorException ex) {
                    Logger.getLogger(AgregarCita.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Error al obtener los cubiculos disponibles", "Error al obtener cubiculos", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                cmbHorarios.setEnabled(false);
                cmbCubiculo.setEnabled(false);
            }
        });

        // Listener para cBoxMedico
        cmbHorarios.addItemListener(e -> {
            if (cmbHorarios.getSelectedIndex() != -1) {
                llenarComboCubiculos();
            } else {
                cmbCubiculo.setEnabled(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cmbCubiculo;
    private javax.swing.JComboBox<LocalTime> cmbHorarios;
    private javax.swing.JComboBox<dto.PsicologoCitaDTO> cmbPsicologos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblCubiculo;
    private javax.swing.JLabel lblFechaCita;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JLabel lblPsicologo;
    private javax.swing.JLabel lblTelefonoPaciente;
    private javax.swing.JLabel lblTelefonoPaciente1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtCorreoPaciente;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtTelefonoPaciente;
    // End of variables declaration//GEN-END:variables
}
